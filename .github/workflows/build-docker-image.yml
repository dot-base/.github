name: üê≥ Build Docker Image

on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: true
        description: "The ref to build the image from. (usually this is a release tag, e.g. v4.0.1)"
      architecture:
        type: string
        required: true
      imageTag:
        type: string
        required: true
        description: "The tag for the docker image. (usually a version tag without leading 'v')"
    secrets:
      GH_BOT_USER:
        required: true
      GH_BOT_PAT:
        required: true
      CR_PAT:
        required: true
      FONTAWESOME_NPM_AUTH_TOKEN:
        required: false

jobs:
  build-amd-docker-image:
    if: github.event.inputs.architecture == 'amd64' || github.event.inputs.architecture == 'both'
    name: Build AMD Docker Image for ${{ inputs.imageTag }}
    uses: ./.github/workflows/build-docker-image-for-arch.yml
    with:
      ref: ${{ inputs.ref }}
      architecture: "amd64"
      imageTag: ${{ inputs.imageTag }}-amd64
      runner: ubuntu-latest
    secrets:
      GH_BOT_USER: ${{ secrets.GH_BOT_USER }}
      GH_BOT_PAT: ${{ secrets.GH_BOT_PAT }}
      CR_PAT: ${{ secrets.CR_PAT }}
      FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

  build-arm-docker-image:
    if: github.event.inputs.architecture == 'arm64' || github.event.inputs.architecture == 'both'
    name: Build ARM Docker Image for ${{ inputs.imageTag }}
    uses: ./.github/workflows/build-docker-image-for-arch.yml
    with:
      ref: ${{ inputs.ref }}
      architecture: "arm64"
      imageTag: ${{ inputs.imageTag }}-arm64
      runner: dotbase-arm-runner
    secrets:
      GH_BOT_USER: ${{ secrets.GH_BOT_USER }}
      GH_BOT_PAT: ${{ secrets.GH_BOT_PAT }}
      CR_PAT: ${{ secrets.CR_PAT }}
      FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

  create-docker-manifest:
    if: github.event.inputs.architecture == 'both'
    needs: [build-amd-docker-image, build-arm-docker-image]
    runs-on: ubuntu-latest
    name: Create and build docker manifest
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Create Docker Manifest
        uses: int128/docker-manifest-create-action@v2.4.0
        with:
          tags: ghcr.io/${{ github.repository }}:${{inputs.imageTag}}
          sources: |
            ghcr.io/${{ github.repository }}:${{inputs.imageTag}}-amd64
            ghcr.io/${{ github.repository }}:${{inputs.imageTag}}-arm64
