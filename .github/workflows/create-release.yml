name: Create Release

on:
  workflow_call:
    secrets:
      GH_BOT_USER:
        required: true
      GH_BOT_PAT:
        required: true        
      CR_PAT:
        required: true
      FONTAWESOME_NPM_AUTH_TOKEN:
        required: false
    outputs:
      tag:
        description: "The semantic version tag generated for the created release e.g. v1.2.3"
        value: ${{ jobs.create-release.outputs.tag }}
      imageTag:
        description: "The Docker image tag corresponding to a release tag. This is without a leading 'v'!"
        value: ${{ jobs.create-release.outputs.imageTag }}
    inputs:
      branch:
        required: true
        type: string
      SERVICE_TYPE:
        required: true
        type: string
      RUN_NPM_PUBLISH:
        required: false
        type: string
        default: "false"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.changelog.outputs.tag }}
      imageTag: ${{ fromJSON(steps.strip-leading-v.outputs.result) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_BOT_PAT }}
          ref: ${{ inputs.branch }}

      - name: Check Out .github Repository
        uses: actions/checkout@v3
        with:
            repository: "dot-base/.github"
            ref: "main"
            path: "actions-repo"
            token: ${{ secrets.GH_BOT_PAT }}

      - name: Install conventional-changelog
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}
        run: |
          npm i conventional-changelog-conventionalcommits@v7.0.2

      - name: Generate Changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v6.1.0
        with:
          github-token: ${{ secrets.github_token }}
          release-count: 0 # keep all changes in changelog
          output-file: "false"
          skip-version-file: "true"
          skip-commit: "true"
          git-push: "false"
          config-file-path: "actions-repo/.github/changelog.config.cjs"

      - name: Strip Leading 'v'
        id: strip-leading-v
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_BOT_PAT }}
          script: |
            const version = "${{ steps.changelog.outputs.tag }}";
            return version.substring(1);

      - name: Create GitHub Release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_BOT_PAT }}
        with:
          commitish: ${{ inputs.branch }}
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}
          prerelease: true

      - name: Manage Milestones
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_BOT_PAT }}
          script: |
            // get next milestone
            const milestones = await github.paginate('GET /repos/{owner}/{repo}/milestones', {
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            const currentMilestone = milestones.find((m) => m.title === 'next');

            // update current next milestone to released version
            if(currentMilestone) {
              console.log('Renaming and closing current milestone');
              await github.request('PATCH /repos/{owner}/{repo}/milestones/{milestone_number}', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                milestone_number: currentMilestone.number,
                title: '${{ steps.changelog.outputs.tag }}',
                state: 'closed'
              });
            }

            // create new next milestone
            console.log('Opening new "next" milestone');
            const nextMilestone  = await github.request('POST /repos/{owner}/{repo}/milestones', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'next'
            });

            // fetch open PRs to to set new "next" milestone
            console.log('Set milestone of open PRs to new "next"');
            const pulls = await github.paginate('GET /repos/{owner}/{repo}/pulls?state=open', {
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // set milestone of open PRs to new "next"
            for (const pull of pulls) {
              await github.request('PATCH /repos/{owner}/{repo}/issues/{pull_request_number}', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_request_number: pull.number,
                milestone: nextMilestone.data.number
              });
            }

  build-docker-image:
    if: inputs.SERVICE_TYPE == 'node' || inputs.SERVICE_TYPE == 'maven'
    name: Build a Docker image for a new release
    needs: create-release
    uses: dot-base/.github/.github/workflows/build-docker-image.yml@main
    with:
      ref: ${{ needs.create-release.outputs.tag }}
      imageTag: ${{ needs.create-release.outputs.imageTag }}
    secrets:
      GH_BOT_USER: ${{ secrets.GH_BOT_USER }}
      GH_BOT_PAT: ${{ secrets.GH_BOT_PAT }}
      CR_PAT: ${{ secrets.CR_PAT }}
      FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

  fhir-resource-npm-publish:
    if: inputs.RUN_NPM_PUBLISH == 'true'
    name: Publish a npm package for a new release
    needs: create-release
    uses: dot-base/.github/.github/workflows/fhir-resource-npm-publish.yml@main
    with:
      tag: ${{ needs.create-release.outputs.tag }}
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      GH_BOT_PAT: ${{ secrets.GH_BOT_PAT }}
