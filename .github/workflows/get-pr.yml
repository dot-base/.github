name: Get PR

on:
  workflow_call:
    secrets:
      GH_BOT_USER:
        required: true
      GH_BOT_PAT:
        required: true
    inputs:
      pr_number:
        type: string
        required: false
    outputs:
      pr:
        description: "The pull request related to the triggering event"
        value: ${{ jobs.get-pr.outputs.pr }}

jobs:
  get-pr:
    name: Get PR
    runs-on: ubuntu-latest
    outputs:
      pr: ${{ steps.get_pr.outputs.result }}
    steps:
      - name: Get PR
        id: get_pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_BOT_PAT }}
          script: |
            const prResponse = await github.paginate("GET /repos/{owner}/{repo}/pulls/{pull_number}", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: !!${{ inputs.pr_number }} ? ${{ inputs.pr_number }} : context.payload.pull_request.number
            });

            const pr = prResponse[0];
            if (!pr) throw new Error('Could not find PR.');
            
            let type = '';
            if (pr.base.ref === 'release') {
              type = 'release';
            } else if (pr.base.ref.startsWith('sync')) {
              type = 'sync';
            } else if (pr.base.ref === 'main') {
              type = 'feature';
            }

            // mergeable_state is a semi documented field in the GitHub API
            // official docs: https://docs.github.com/en/graphql/reference/enums#mergestatestatus
            // inofficial (better) docs: https://github.com/octokit/octokit.net/issues/1763
            const isMergeable = pr.mergeable_state == 'clean' || pr.mergeable_state == 'unstable';
            Object.assign(pr, { type: type, isMergeable: isMergeable });

            console.log(`Got PR. Type is ${type} and mergeable_state is ${pr.mergeable_state}.`);

            return pr;
