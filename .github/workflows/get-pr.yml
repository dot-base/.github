name: Get PR

on:
  workflow_call:
    secrets:
      GH_BOT_USER:
        required: true
      GH_BOT_PAT:
        required: true
    inputs:
      pr_number:
        type: string
        required: false
    outputs:
      pr:
        description: "The pull request related to the triggering event"
        value: ${{ jobs.get-pr.outputs.pr }}

jobs:
  get-pr:
    name: Get PR
    runs-on: ubuntu-latest
    outputs:
      pr: ${{ steps.get_pr.outputs.result }}
    steps:
      - name: Get PR
        id: get_pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_BOT_PAT }}
          script: |
            const prNumber = !!"${{ inputs.pr_number }}" ? Number("${{ inputs.pr_number }}") : (context.payload.pull_request?.number);
            if (!prNumber) throw new Error('PR number not provided and no pull_request in payload.');

            const query = `
              query($owner: String!, $name: String!, $number: Int!) {
                repository(owner: $owner, name: $name) {
                  pullRequest(number: $number) {
                    id
                    number
                    title
                    baseRefName
                    mergeStateStatus
                    milestone { id number title }
                    reviewRequests(first: 100) {
                      nodes {
                        requestedReviewer {
                          __typename
                          ... on User { id login }
                          ... on Team { id slug }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const data = await github.graphql(query, {
              owner: context.repo.owner,
              name: context.repo.repo,
              number: prNumber,
            });

            const prNode = data?.repository?.pullRequest;
            if (!prNode) throw new Error('Could not find PR via GraphQL.');

            // Compose GraphQL-native shape with computed helpers
            const type = prNode.baseRefName === 'release'
              ? 'release'
              : (prNode.baseRefName?.startsWith('sync') ? 'sync' : (prNode.baseRefName === 'main' ? 'feature' : ''));
            const isMergeable = ['CLEAN', 'UNSTABLE'].includes(String(prNode.mergeStateStatus));

            const pr = {
              id: prNode.id,
              number: prNode.number,
              title: prNode.title,
              baseRefName: prNode.baseRefName,
              mergeStateStatus: prNode.mergeStateStatus,
              milestone: prNode.milestone ? { id: prNode.milestone.id, number: prNode.milestone.number, title: prNode.milestone.title } : null,
              reviewRequests: prNode.reviewRequests,
              type,
              isMergeable
            };

            console.log(`Got PR via GraphQL. Type is ${type} and mergeStateStatus is ${pr.mergeStateStatus}.`);

            return pr;
