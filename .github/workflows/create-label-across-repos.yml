name: Create Label Across Repos

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Label name"
        required: true
        type: string
      color:
        description: "Hex color without # (optional)"
        required: false
        type: string
      description:
        description: "Label description (optional)"
        required: false
        type: string

jobs:
  create-label:
    name: Create/Update label in all repos
    runs-on: ubuntu-latest
    steps:
      - name: Create label across repos
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_BOT_PAT || secrets.GITHUB_TOKEN }}
          script: |
            const nameInput = core.getInput('name', { required: true });
            if (!nameInput || !nameInput.trim()) throw new Error('name input is required');
            const owner = context.repo.owner;
            const name = nameInput.trim();

            let color = 'ededed';
            let colorInput = core.getInput('color');
            if (typeof colorInput === 'string' && colorInput.trim().length > 0) {
              colorInput = colorInput.trim().replace(/^#/, '').toLowerCase();
              if (!/^[0-9a-f]{6}$/i.test(colorInput)) {
                throw new Error(`Invalid color '${colorInput}'. Use 6 hex chars, no leading #.`);
              }
              color = colorInput;
            }

            const descInput = core.getInput('description');
            const description = (descInput ?? '').toString();

            console.log(`Ensuring label '${name}' (color #${color}${description ? `, desc '${description}'` : ''}) across owner '${owner}'`);

            // Fetch repositories for org or user with pagination, skipping archived
            async function listReposForOwner(owner) {
              try {
                return await github.paginate(github.rest.repos.listForOrg, { org: owner, per_page: 100, type: 'all' });
              } catch (e) {
                if ((e?.message || '').includes('Not Found') || e?.status === 404) {
                  return await github.paginate(github.rest.repos.listForUser, { username: owner, per_page: 100, type: 'all' });
                }
                throw e;
              }
            }

            const repos = await listReposForOwner(owner);
            console.log(`Found ${repos.length} repositories for ${owner}`);

            let created = 0, updated = 0, skipped = 0, failed = 0;
            for (const r of repos) {
              if (r.archived || r.disabled || r.private && !r.permissions?.push) { skipped++; continue; }

              const repo = r.name;
              try {
                // Try GET first for clearer branching
                let exists = true;
                try {
                  await github.rest.issues.getLabel({ owner, repo, name });
                } catch (e) {
                  if (e?.status === 404) exists = false; else throw e;
                }

                if (!exists) {
                  await github.rest.issues.createLabel({ owner, repo, name, color, description });
                  created++; console.log(`[created] ${owner}/${repo}`);
                } else {
                  await github.rest.issues.updateLabel({ owner, repo, name, color, description });
                  updated++; console.log(`[updated] ${owner}/${repo}`);
                }
              } catch (e) {
                failed++;
                console.log(`[failed] ${owner}/${repo}: ${e?.status || ''} ${e?.message || e}`);
              }
            }

            console.log(`Done. created=${created}, updated=${updated}, skipped=${skipped}, failed=${failed}`);
